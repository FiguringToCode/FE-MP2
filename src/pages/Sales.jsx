import { useContext, useState } from "react";
import { SideBar } from "../components/Sidebar";
import { GiHamburgerMenu } from "react-icons/gi";
import CRMContext from "../CRMContext";



export const Sales = () => {
    const { leads, loading, salesAgents, loading2, sidebarOpen, setSidebarOpen } = useContext(CRMContext);

    const agents = salesAgents?.map(agent => agent.name) || [];

    const [leadClose, setLeadClose] = useState(45)


    return (
        <>
            <div className="d-flex body-style">
                <SideBar sidebarOpen={sidebarOpen} />

                <div className="container main-content py-5 ps-md-5">

                    <button className="sidebar-toggle-btn d-md-none" onClick={() => setSidebarOpen(!sidebarOpen)} aria-label="Toggle sidebar">
                        <GiHamburgerMenu />
                    </button>

                    <div id="Header" className="fs-1 fw-bold mb-4 py-3" style={{background: "linear-gradient(90deg,#1e88e5 60%,#60a9f7 100%)", color: "white", borderRadius: "18px",}}>
                        Leads By Sales Agents
                    </div>

                    <section className="my-5">
                        <h3 className="fw-semibold fs-2 text-center">Lead List by Agents</h3>
                    </section>
                    <hr />

                    <section className="">
                        {loading ? (
                            <div className="text-center my-5">
                                <div className="spinner-border text-primary" role="status" aria-hidden="true"></div>
                                <p className="mt-2 fw-semibold text-secondary">Loading leadsâ€¦</p>
                            </div>
                        ) : agents.length > 0 ? (
                            agents.map((agent, index) => (
                                <>
                                    <h3 key={index} className="ps-md-5 my-4">
                                        Sales Agent: {agent}
                                    </h3>
                                    {leads?.filter(lead => lead?.salesAgent?.name === agent).length > 0 ? leads?.filter(lead => lead?.salesAgent?.name === agent)
                                    .filter(lead => lead?.timeToClose <= leadClose)
                                    .map((sale, index) => <h5 className="ps-md-5">Lead {index + 1} - Status: {sale?.status}</h5>) : <h5 className="ps-md-5">No leads generated by the agent.</h5>}
                                    <hr />
                                </>
                            ))
                        ) : (<p>No sales agents found</p>)}
                    </section>

                    <section className="px-md-5 mb-5 d-flex align-items-end gap-5">
                        <h3 className="fw-semibold">Sort By Time To Close: </h3>
                        <div className="priority-filter-group mt-3">
                            {[30, 20, 10].map(timeToClose => (
                                <button key={timeToClose} className="btn btn-outline-info px-4 fw-semibold" style={{borderRadius: '30px', minWidth: '120px'}} onClick={() => setLeadClose(timeToClose)}>
                                 within {timeToClose} days
                                </button>
                            ))}
                        </div>
                    </section>

                </div>

            </div>
        </>
    )
}